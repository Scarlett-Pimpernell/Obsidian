--SQL_Injection_Attack_Test_v00.01
--Upon further reflection, I believe that the SQL injection and Powershell injection vulnerabilities which exist whenever you use dynamic SQL in a query, have not been suitably fixed by default within SQL Server 2019. The hacker who has public access to the code could simply insert whetever SQL or Powershell they wanted into the filenames that are extracted and used in the query, along with clever use of apostrophes (you may have to use new line or carriage return characters, as well, with some coding languages). I think Micrsoft may have to do something about this vulnerability, but for now the manual workaround (which is subject to common human-error) is to enclose every consecutive apostrophe string-pattern in single apostrophes, using a replace function around the @Variable in each dynamic SQL string. This encapsulation method can be applied to any computer program, algorithm, or technique which is vulnerable to code injection because it is dynamically 'structured' i.e. where variables are used in the method code, rather than only as an attribute or value to be passed to the method. Simply switch the apostrophe to its requisite string declaration character in whatever coding language you are using. If in your coding language of choice, strings are declared by a single character (i.e. without encapsulation), all you need to do to protect your code is to use a replace function on the @Variable references which adds another single string declaration character to any existing consecutive single string declaration characters within the variable.
--The exploit in Test 3 requires you to start your hack variable with the code necessary to finish off the code block where the dynamic variable is defined. Then concatenated to the right of this prepended code, you cleverly insert your hack code. Then concatenated to the right of this hack code, you end the hack variable with the code necessary to start off the code block where the dynamic variable is defined.

--Test 1: Injection attack on a table variable field... TEST PASSED!
Declare @Variable Nvarchar(Max)
Set @Variable = 
'''Can you provide the date and time of the end of the world as we know it?'' As [Customer_Request] 
Drop Table If Exists dbo.Injection_Hack 
Create Table dbo.Injection_Hack ([Message_From_Hacker] Nvarchar(Max)) 
Insert Into dbo.Injection_Hack ([Message_From_Hacker]) Select ''You Have Been Hacked'' As [Message_From_Hacker] 
Select ''Can you provide the date and time of the end of the world as we know it?'''

Declare @Table_Variable Table ([Customer_Request] Nvarchar(Max))
Insert Into @Table_Variable ([Customer_Request])
Select @Variable As [Customer_Request]

Select * From @Table_Variable
Select dbo.Injection_Hack

--Test 2: Injection attack on a table field... TEST PASSED!
Declare @Variable Nvarchar(Max)
Set @Variable = 
'''Can you provide the date and time of the end of the world as we know it?'' As [Customer_Request] 
Drop Table If Exists dbo.Injection_Hack 
Create Table dbo.Injection_Hack ([Message_From_Hacker] Nvarchar(Max)) 
Insert Into dbo.Injection_Hack ([Message_From_Hacker]) Select ''You Have Been Hacked'' As [Message_From_Hacker] 
Select ''Can you provide the date and time of the end of the world as we know it?'''

Create Table dbo.Customer_Requests ([Customer_Request] Nvarchar(Max))
Insert Into dbo.Customer_Requests ([Customer_Request])
Select @Variable As [Customer_Request]

Select * From dbo.Customer_Requests
Select dbo.Injection_Hack

--Test 3: Injection attack on dynamically structured code... TEST FAILED!
Declare @Variable Nvarchar(Max)
Set @Variable = 
'''Can you provide the date and time of the end of the world as we know it?'' As [Customer_Request] 
Drop Table If Exists dbo.Injection_Hack 
Create Table dbo.Injection_Hack ([Message_From_Hacker] Nvarchar(Max)) 
Insert Into dbo.Injection_Hack ([Message_From_Hacker]) Select ''You Have Been Hacked'' As [Message_From_Hacker] 
Select ''Can you provide the date and time of the end of the world as we know it?'''

Declare @Dynamic_SQL Nvarchar(Max)
Set @Dynamic_SQL = N'Select ' + @Variable + ' As [Customer_Request]'

Select @Dynamic_SQL
Execute sp_executesql @Dynamic_SQL;
Select * From dbo.Injection_Hack
