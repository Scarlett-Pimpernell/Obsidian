--Dynamic SQL - Overview
--Usually, when using dynamic SQL, you will be iterating through rows on a table or table variable.
--In some circumstances, you may just want to run a stored procedure, without a returned output value, based on an execute statement which has variabilised parameters.
--In other circumstances, you may want to calculate a text or numeric value, based on a select statement which has variabilised parameters.
--In order to achieve this, you should use the Execute sp_executesql statement. Please see the examples below.
--Please remember, that currently, I believe it is not possible to return a table variable result using dynamic SQL and the sp_executesql stored procedure. May be something to get on to Microsoft about...
--It would also be useful if Microsoft would include multi-line variable features in SQL Server. This would allow for some very effective use of multi-line Powershell commands in dynamic SQL.

--Nota Bene
--Due to cyber security considerations, it is important to make sure that when executing the sp_executesql stored procedure, that there is no possibility of a utilised variable containing the sp_executesql term. This can be achieved by wrapping the variables in a Replace() function.
--Likewise, due to cyber security considerations, it is important to make sure that when executing the xp_cmdshell stored procedure, that there is no possibility of a utilised variable containing the xp_cmdshell term. This can be achieved by wrapping the variables in a Replace() function.

--Dynamic SQL - Syntax Guidance
--1. The first thing to do, is to declare a named variable for the dynamic SQL command, as well as any other variables you want to use.
--2. Then you need to set the named variables.
--3. If you are using only the sp_executesql stored procedure to execute a bit of dynamic SQL with variables, then you can just type the select statement enclosed in single quotes, and exchange the variabilised terms with your previously named @Variables.
--4. When doing this, concatenate the static strings which are enclosed in single apostrophes, from the @Variables, by using the term:  + . (I.e. a single space on either side of the positive character, and without the full stop of course!)
--5. If you are using the xp_cmdshell stored procedure in order to execute a Powershell command, then you will need to set the command variable by using a command string instead of, or alongside of, or within the previous couple of steps dynamic select statement.
--6. This command string should always start with the term: 'Execute xp_cmdshell'. (Without the full stop of course!)
--7. This should be followed by a space, by using the term: + ' '. (Without the full stop of course!)
--8. Then you can type the powershell/command prompt, enclosed in persisted single apostrophes ('''). The persisted single apostrophes work in a similar way to how you usually wrap a string value in single apostrophes. Here the middle apostrophe is the string.
--9. Bear in mind that to persist any single apostrophe when the sp_executesql command executes, you must use the term: '''. (Without the full stop of course!)
--10. All terms in the command string should be separated by the concatenate term:  + . (I.e. a single space on either side of the positive character, and without the full stop of course!)
--11. You will usually find that most of the command string can be made up of static strings which are enclosed in single apostrophes.
--12. Any variables must be declared beforehand, as previously stated. To use them, simply type the variable name in the form of: + @Variable. (Without the full stop of course!)
--13. The last term in any Powershell/Command statment should be a persisted apostrophe term as follows:  + '''. (I.e. a single space on either side of the positive character, which is followed by the persisted apostrophe term. (Without the full stop of course!))
--14. If you are executing an sp_executesql stored proceudre which returns no output, you must include a suffix term to the end of the command string of: + ', No_Output;'. (Without the full stop of course!) Please see the example below.
--15. If you are executing an sp_executesql  stored procedure or with a select statment or Powershell/Command statement which returns a text or numeric value, you must include a suffix term after the Execute sp_executesql statmement of: , N'@Data1 Nvarchar(MAX) Output',@Data1 =@Data Output. (Without the full stop of course!) Please see the example below. This suffix is a return value term, where we are simply passing the select statment's @Data1 value, into the declared @Data value.
--16. Remember, that if you are returning an Nvarchar value, you must include the N' term in both the select statement, and the return variable term.
--17. Also, if you are using a function in the command string, you must cast it as a text data type, e.g. Cast(Getdate() As Nvarchar(Max)).
--18. Finally, remember that file paths and file names can't contain certain characters (for Microsoft Windows operating systems, these disallowed characters include: \/:*?"<>|). Simply execute your command statement once it has been set, in order to check for the presence of these disallowed characters.


--DYNAMIC SQL - NO OUTPUT EXAMPLE:

--Declare @File_Path Nvarchar(Max);
--Declare @File_Name Nvarchar(Max);
--Declare @File_Copy_Command Nvarchar(Max);

--Set @File_Path = 'Some text value' (encolsed in apostrophes) or a numeric value without apostrophes if it is a numeric variable.
--Set @File_Name = 'Some text value' (encolsed in apostrophes) or a numeric value without apostrophes if it is a numeric variable.
--Set @File_Copy_Command = 
--    'Execute xp_cmdshell' + ' ' + '''Copy' + ' ' + @File_Path + @File_Name + ' ' + @File_Path + 'Archive''' + ', No_Output;'

--Execute sp_executesql @File_Copy_Command;


--DYNAMIC SQL - RETURNED OUTPUT EXAMPLE:

--Declare @Data Nvarchar(Max);
--Declare @File_Path Nvarchar(Max);
--Declare @File_Name Nvarchar(Max);
--Declare @File_Import_Command Nvarchar(Max);

--Set @File_Path = 'Some text value' (encolsed in apostrophes) or a numeric value without apostrophes if it is a numeric variable.
--Set @File_Name = 'Some text value' (encolsed in apostrophes) or a numeric value without apostrophes if it is a numeric variable.
--Set @File_Import_Command = 
--    N'SELECT @Data1 = Cast([Bulkcolumn] AS Nvarchar(MAX)) from Openrowset (Bulk ''' + @File_Path + @File_Name + ''', Single_CLOB) Row_Set'

--Execute sp_executesql @File_Import_Command, N'@Data1 Nvarchar(MAX) Output',@Data1 =@Data Output