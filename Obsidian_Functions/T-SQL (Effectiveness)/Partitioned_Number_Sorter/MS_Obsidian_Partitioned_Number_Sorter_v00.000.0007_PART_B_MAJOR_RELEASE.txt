--Obsidian_Partitioned_Number_Sorter_Function

--NOTA BENE:
--This algorithm will provide the best performance with input datasets that have a large range in numerical values (i.e. covering many different significant figures), and also when the digit length distribution of arguements across this input data range, is as flat/equal as possible across said significant figure classes.
--For best performance (and this is necessary to take any advantage of the pratitioned sort technique), please remove leading and trailing zeros before feeding a dataset into this stored procedure!!!
--In an alternative implementation, you would partition the data into separate partition tables, rather than simply labelling each row with a group label, and indeed, this alternative approach may be even quicker and more energy-efficient, because you would avoid the extra partition group checks, when building the final sorted table.


--The following few blocks of code create a new function which is used to split strings on specific character patterns, either ordinally or orderless, and while prefixing or suffixing a desired character pattern.
Declare @Create_Procedure_Command Nvarchar(Max);
Set @Create_Procedure_Command =
	N'Create Procedure dbo.Obsidian_Partitioned_Number_Sorter
@Sort_Polarity NVarchar(Max),
@Data Obsidian_Partitioned_Number_Sorter_Column_Structure ReadOnly
	
	
As
		
		
Set NoCount On;


--Data Validation Checks For Out Of Scope Parameters
--(@Sort Polarity)
If @Sort_Polarity Is Null GoTo Invalid_Sort_Polarity_Input_Arguement
If @Sort_Polarity <> ''Ascending'' --Dual If Statement With the Line Afterwards.
	If @Sort_Polarity <> ''Descending'' GoTo Invalid_Sort_Polarity_Input_Arguement

--(@Data)
If (Select Count(1) From @Data) Is Null GoTo Invalid_Data_Input_Arguement
If (Select Count(1) From @Data) < 2 GoTo Invalid_Data_Input_Arguement


--Internal Variables
Declare @Sorted_Data_A As Table ([Arguement] Nvarchar(Max), [Length] BigInt)
Declare @Sorted_Data_B As Table ([Length] BigInt, [Partition] BigInt)
Declare @Partition_Count BigInt
Declare @Loop_Count BigInt
Declare @Sorted_Data_C As Table ([Order] Nvarchar(Max), [Arguement] Nvarchar(Max))
Declare @Arguement_Count BigInt


--The following codeblocks partition and intra-partition-sort the input data arguement column.
Insert Into @Sorted_Data_A ([Arguement], [Length])
Select
	[Arguement] As [Arguement],
	Len([Arguement]) As [Length]
From @Data

--The following codeblocks return sorted data as desired.
--Ascending Sort
If @Sort_Polarity = ''Ascending''
Begin
	
	Insert Into @Sorted_Data_B ([Length], [Partition])
	Select
		Min([Length]) As [Length],
		Row_Number() Over(Order By [Length] Asc) As [Partition]
	From @Sorted_Data_A
	Group By [Length]

	Set @Partition_Count = (Select Count(1) From @Sorted_Data_B)

	Set @Loop_Count = 0
	Set @Arguement_Count = 0
	While @Loop_Count < @Partition_Count
	Begin
		
		Set @Loop_Count = (@Loop_Count + 1)
		
		Insert Into @Sorted_Data_C ([Order], [Arguement])
		Select
			Cast((Row_Number() Over(Order By A.[Arguement] Asc) + @Arguement_Count) As NVarchar(Max)) As [Order],
			[Arguement] As [Arguement]
		From @Sorted_Data_A A
		Inner Join @Sorted_Data_B B
			On (A.[Length] = B.[Length])
		Where B.[Partition] = @Loop_Count
		
		Set @Arguement_Count = (Select Count(1) From @Sorted_Data_C)

	End

End

--Descending Sort
If @Sort_Polarity = ''Descending''
Begin
	
	Insert Into @Sorted_Data_B ([Length], [Partition])
	Select
		Min([Length]) As [Length],
		Row_Number() Over(Order By [Length] Desc) As [Partition]
	From @Sorted_Data_A
	Group By [Length]

	Set @Partition_Count = (Select Count(1) From @Sorted_Data_B)

	Set @Loop_Count = 0
	Set @Arguement_Count = 0
	While @Loop_Count < @Partition_Count
	Begin
		
		Set @Loop_Count = (@Loop_Count + 1)
		
		Insert Into @Sorted_Data_C ([Order], [Arguement])
		Select
			Cast((Row_Number() Over(Order By A.[Arguement] Desc) + @Arguement_Count) As NVarchar(Max)) As [Order],
			[Arguement] As [Arguement]
		From @Sorted_Data_A A
		Inner Join @Sorted_Data_B B
			On (A.[Length] = B.[Length])
		Where B.[Partition] = @Loop_Count

		Set @Arguement_Count = (Select Count(1) From @Sorted_Data_C)

	End

End

--Return the sorted data
Select * From @Sorted_Data_C
Return


--Other exception cases...
Invalid_Sort_Polarity_Input_Arguement:
Insert Into @Sorted_Data_C ([Order], [Arguement])
Values
(''Exception'', ''The first input arguement value (Sort_Polarity), is out of scope for one of the following reasons... It is either not the string "Ascending" (without the double-quotes of course), is not the string "Descending" (without the double-quotes of course), or is null.'')
Select * From @Sorted_Data_C
Return

Invalid_Data_Input_Arguement:
Insert Into @Sorted_Data_C ([Order], [Arguement])
Values
(''Exception'', ''The second input arguement value (Data), is out of scope for one of the following reasons... It is either not containing more than one row, or is empty.'')
Select * From @Sorted_Data_C
Return


';


If Not Exists (Select * From Sysobjects Where Name='Obsidian_Partitioned_Number_Sorter' and Xtype='P') --Make sure this function is not in use for another proprietary technique outside the Obsidian repository.
Execute sp_executesql @Create_Procedure_Command;
